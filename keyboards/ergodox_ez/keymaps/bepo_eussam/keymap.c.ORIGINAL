#include QMK_KEYBOARD_H
#include "version.h"
#include "keymap_german.h"
#include "keymap_nordic.h"
//PF: remplacement de keymap_french.h par keymap_french_osx.h
#include "keymap_french_osx.h"
#include "keymap_spanish.h"
#include "keymap_hungarian.h"

#define KC_MAC_UNDO LGUI(KC_Z)
#define KC_MAC_CUT LGUI(KC_X)
#define KC_MAC_COPY LGUI(KC_C)
#define KC_MAC_PASTE LGUI(KC_V)
#define KC_PC_UNDO LCTL(KC_Z)
#define KC_PC_CUT LCTL(KC_X)
#define KC_PC_COPY LCTL(KC_C)
#define KC_PC_PASTE LCTL(KC_V)

//PF: define pour visibilit&
#define ___ ___

enum custom_keycodes {
  RGB_SLD = SAFE_RANGE, // can always be here
  TOGGLE_LAYER_COLOR,
  EPRM,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [0] = LAYOUT_ergodox(
    /* left hand */
    LT(3,KC_ESCAPE),  FR_1,     FR_2,     FR_3,     FR_4,     FR_5,     ___,
    KC_TAB,           KC_B,     FR_EACU,  KC_P,     KC_O,     FR_EGRV,  KC_BSPACE,
    FR_W,             FR_A,     KC_U,     KC_I,     KC_E,     FR_COMM,
    KC_LSHIFT,        FR_AGRV,  KC_Y,     KC_X,     FR_DOT,   KC_K,     KC_TAB,
    KC_LGUI,          KC_LCTRL, ___,      FR_LPRN,  FR_UNDS,
                                                                        KC_MAC_PASTE,   KC_MAC_COPY,
                                                                        KC_MAC_CUT,
                                                                        LT(1,KC_SPACE), LT(2,KC_BSPACE),  KC_LGUI,

    /* right hand */
    ___,              FR_6,     FR_7,     FR_8,     FR_9,     FR_0,     ___,
    ___,              FR_CIRC,  KC_V,     KC_D,     KC_L,     KC_J,     FR_Z,
    KC_C,             KC_T,     KC_S,     KC_R,     KC_N,     FR_M,
    KC_CAPSLOCK,      FR_APOS,  FR_Q,     KC_G,     KC_H,     KC_F,     FR_CCED,
    FR_EQL,           FR_RPRN,  ___,      ___,      ___,
                                                                        ___,      ___,
                                                                        ___,
                                                                        LT(3,KC_NO),    LT(2,KC_BSPACE),    LT(1,KC_ENTER)),


// FR_AT marche pas sur mon clavier mac
  [1] = LAYOUT_ergodox(
    /* left hand */
    ___,        ___,        ___,        ___,        ___,        ___,        ___,
    ___,        ___,        FR_AMP,     ___,        ___,        ___,        ___,
    ___,        FR_AT,      FR_GRV,     FR_APOS,    FR_COLN,    FR_SCLN,
    ___,        ___,        FR_PERC,    FR_ASTR,    FR_PLUS,    ___,        ___,
    ___,        ___,        ___,        FR_LBRC,    FR_MINS,

                                                                            KC_PC_COPY, KC_PC_PASTE,
                                                                            ___,
                                                                            ___,        ___,    ___,
    /* right hand */
// FR_HASH marche pas sur mon clavier mac
    ___,        ___,        ___,        ___,        ___,        ___,        ___,
    ___,        ___,        ___,        FR_CIRC,    FR_PIPE,    ___,        ___,
    FR_HASH,    FR_BSLS,    FR_UNDS,    FR_SLSH,    FR_TILD,    ___,
    ___,        ___,        ___,        ___,        ___,        ___,        ___,
    FR_EXLM,    FR_RBRC,    ___,        ___,        ___,
                                                                            ___,    ___,
                                                                            ___,
                                                                            ___,___,___),



  [2] = LAYOUT_ergodox(___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,FR_QUOT,___,___,___,___,___,___,___,___,___,___,___,___,FR_LCBR,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,FR_LESS,FR_MINS,FR_GRTR,___,___,___,___,___,___,___,___,___,FR_QUES,FR_RCBR,___,___,___,___,___,___,___,___,___),

  [3] = LAYOUT_ergodox(___,___,___,___,___,___,___,___,___,___,KC_UP,___,___,___,___,___,KC_LEFT,KC_DOWN,KC_RIGHT,___,___,___,___,___,___,___,___,___,___,___,___,KC_MINUS,___,___,___,___,___,___,___,___,___,___,___,___,___,___,___,KC_7,KC_8,KC_9,___,___,FR_PLUS,KC_4,KC_5,KC_6,FR_ASTR,___,___,FR_MINS,KC_1,KC_2,KC_3,FR_SLSH,___,KC_EQUAL,KC_0,___,___,___,___,___,___,___,___,___),

};

bool suspended = false;

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case EPRM:
      if (record->event.pressed) {
        eeconfig_init();
      }
      return false;
    case RGB_SLD:
      if (record->event.pressed) {
        rgblight_mode(1);
      }
      return false;
  }
  return true;
}

uint32_t layer_state_set_user(uint32_t state) {

    uint8_t layer = biton32(state);

    ergodox_board_led_off();
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    switch (layer) {
      case 1:
        ergodox_right_led_1_on();
        break;
      case 2:
        ergodox_right_led_2_on();
        break;
      case 3:
        ergodox_right_led_3_on();
        break;
      case 4:
        ergodox_right_led_1_on();
        ergodox_right_led_2_on();
        break;
      case 5:
        ergodox_right_led_1_on();
        ergodox_right_led_3_on();
        break;
      case 6:
        ergodox_right_led_2_on();
        ergodox_right_led_3_on();
        break;
      case 7:
        ergodox_right_led_1_on();
        ergodox_right_led_2_on();
        ergodox_right_led_3_on();
        break;
      default:
        break;
    }
    return state;

};
